package Aeroclub.app;

import Aeroclub.app.data.database;
import org.mindrot.jbcrypt.BCrypt;
import java.awt.event.KeyEvent;
import java.sql.*;

public class authentification extends javax.swing.JFrame {

    /**
     * Creates new form connection
     */
    public authentification() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lockimg = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        user = new javax.swing.JLabel();
        password = new javax.swing.JLabel();
        userInput = new javax.swing.JTextField();
        passwordInput = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        connectButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AEROCLUB - AUTHENTIFICATION");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setMinimumSize(new java.awt.Dimension(600, 300));
        setResizable(false);
        setSize(new java.awt.Dimension(600, 300));

        jPanel1.setLayout(null);

        jPanel4.setLayout(null);

        lockimg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lockimg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Aeroclub/images/lock.png"))); // NOI18N
        jPanel4.add(lockimg);
        lockimg.setBounds(0, 0, 150, 176);

        jPanel1.add(jPanel4);
        jPanel4.setBounds(0, 0, 150, 200);

        jPanel3.setLayout(null);

        user.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        user.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        user.setText("UTILISATEUR :");
        jPanel3.add(user);
        user.setBounds(11, 32, 131, 50);

        password.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        password.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        password.setText("MOT DE PASSE :");
        jPanel3.add(password);
        password.setBounds(0, 126, 148, 50);

        userInput.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        userInput.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        userInput.setText("admin");
        userInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userInputKeyPressed(evt);
            }
        });
        jPanel3.add(userInput);
        userInput.setBounds(155, 38, 260, 30);

        passwordInput.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        passwordInput.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        passwordInput.setText("admin");
        passwordInput.setPreferredSize(new java.awt.Dimension(105, 38));
        passwordInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordInputKeyPressed(evt);
            }
        });
        jPanel3.add(passwordInput);
        passwordInput.setBounds(155, 132, 260, 30);
        passwordInput.getAccessibleContext().setAccessibleParent(jPanel3);

        jPanel1.add(jPanel3);
        jPanel3.setBounds(150, 0, 450, 200);

        jPanel2.setPreferredSize(new java.awt.Dimension(600, 100));
        jPanel2.setLayout(null);

        connectButton.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        connectButton.setText("SE CONNECTER");
        connectButton.setMaximumSize(new java.awt.Dimension(150, 40));
        connectButton.setMinimumSize(new java.awt.Dimension(150, 40));
        connectButton.setName(""); // NOI18N
        connectButton.setPreferredSize(new java.awt.Dimension(150, 40));
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        jPanel2.add(connectButton);
        connectButton.setBounds(220, 30, 150, 40);

        errorLabel.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLabel.setText("L'utilisateur ou le mot de passe est incorrect !");
        errorLabel.setToolTipText("");
        errorLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 1, true));
        errorLabel.setPreferredSize(new java.awt.Dimension(320, 30));
        jPanel2.add(errorLabel);
        errorLabel.setBounds(130, 0, 330, 20);
        errorLabel.setVisible(false);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(0, 200, 600, 100);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void userInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userInputKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            authentification(userInput.getText(), passwordInput.getText());
        }
    }//GEN-LAST:event_userInputKeyPressed

    private void passwordInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordInputKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            authentification(userInput.getText(), passwordInput.getText());
        }
    }//GEN-LAST:event_passwordInputKeyPressed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        authentification(userInput.getText(), passwordInput.getText());
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(authentification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(authentification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(authentification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(authentification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new authentification().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lockimg;
    private javax.swing.JLabel password;
    private javax.swing.JPasswordField passwordInput;
    private javax.swing.JLabel user;
    private javax.swing.JTextField userInput;
    // End of variables declaration//GEN-END:variables

    public void authentification(String login, String password) {
        
        Connection connection = null;
        
        try {
            
            database db = new database();
            Class.forName("org.postgresql.Driver");
            connection = DriverManager.getConnection("jdbc:postgresql://"+db.host+"/"+db.database, db.username, db.password);
            
            PreparedStatement ps = connection.prepareStatement("SELECT password FROM membres WHERE login = ?;");
            ps.setString(1, login);
            ResultSet rs = ps.executeQuery();
            if (!rs.next()) {
                errorLabel.setVisible(true);
            } else {

                SHA512 sha512 = new SHA512();

                if (sha512.hash(password).equals(rs.getString("password"))) {

                    errorLabel.setVisible(false);

                    this.setVisible(false);

                    new menuAeroclub().setVisible(true);

                    this.dispose();

                }else{

                    errorLabel.setVisible(true);

                }
            }
            
        } catch(ClassNotFoundException | SQLException e) {
            
            System.err.println(e.getClass().getName()+": "+e.getMessage());
            
            System.exit(0);
            
        } finally {
            
            if (connection != null) {
               
                try {
                    
                    connection.close();
                    
                } catch (SQLException e) {
                    
                    e.printStackTrace();
                    
                }
            }
        }
        
    }
    
}
